const prompt = require("prompt-sync")({ sigint: true });

const hat = "^";
const hole = "O";
const fieldCharacter = "░";
const pathCharacter = "*";
let myArrayGrid = [];
let loseMsg = "Game Over!";
let newLocation = []; //Saves the grid char before input location is updated

class Field {
    constructor(fieldArray, gp1, gp2) {
        this.field = fieldArray;
        this.gp1 = gp1;
        this.gp2 = gp2;
    }
    //Function: Printer
    //What: converts array to string
    //Input: array
    //Output: string
    printer() {
        let fieldString = "";
        for (let i = 0; i < this.field.length; i++) {
            fieldString += this.field[i].join("");
            fieldString += "\n";
        }
        console.log(fieldString);
    }
    //Function: Tile Random
    //What: Selects between either a hole or field character/string
    //Input: N/A
    //Output: String
    tileRandom() {
        let charArray = [hole, fieldCharacter];
        return charArray[Math.floor(Math.random() * 2)];
    }
    //Function: Print Tile Array in line
    //What: Given a number/size/length, this function will print/push the hole and field characters onto an array. Hole or Field characters are generated by calling the tileRandom function.
    //Input: Number
    //Output: Array
    printTileArrayLine(size) {
        let helperArray = [];
        for (let i = 0; i < size; i++) {
            helperArray.push(this.tileRandom());
        }
        return helperArray;
    }
    //Function: Printing the Hat Array Line
    //What: Printing the hat character at a random position. Saves a random number based on the length of the array. Pushes the hat character at the number. Else, calls the titleRandom function and pushes onto array.
    //Input: Number (for the length of the array line)
    //Output: Array that contains characters/strings
    printHatArrayLine(size) {
        let helperArray = [];
        let hatPositionNumber = Math.floor(Math.random() * size);
        for (let i = 0; i < size; i++) {
            if (i === hatPositionNumber) {
                helperArray.push(hat);
            } else {
                helperArray.push(this.tileRandom());
            }
        }
        return helperArray;
    }
    //Function: Print Tile Array Grid
    //What: Printing the 2D array grid. Generates a random number for the 'line' the hat tile array will be printed. Calling the function that prints tile array lines and pushing on the array grid.
    //Input: Number (for length of array[i]), Number (width, but this is the length for array[j])
    //Output: 2D array
    printTileArrayGrid(length, width) {
        let hatLineNum = Math.ceil(Math.random() * length);
        for (let i = 0; i < length; i++) {
            if (i === hatLineNum) {
                myArrayGrid.push(this.printHatArrayLine(width));
            } else {
                myArrayGrid.push(this.printTileArrayLine(width));
            }
        }
        return myArrayGrid;
    }
    //Function: Win Or Lose
    //What: checks the location of movement to see if player character landed on win or loss conditions.
    //Input: string/character at array index
    //Oput: Number
    winOrLose(xloco) {
        let gameCond = 0;
        if (xloco === hat) {
            //console.log("You found your hat!");
            return (gameCond = 1);
        } else if (xloco === hole) {
            //console.log(`You fell into a hole, ${loseMsg}`);
            return (gameCond = 2);
        } else if (xloco === undefined) {
            console.log(`You fell off the map, ${loseMsg}`);
            return (gameCond = 3);
        } else {
            //continue game
            return (gameCond = 4);
        }
    }
    //Function Name: My Path
    //What: replaces the character/string in 2D array index location, saves the new array to the main myArrayGrid, overrides the starting locations, prints the new array.
    //Input: Array, Number (index of 1st Array), Number (index of 2nd Array)
    //Output: Spliced original array
    myPath(array, p1, p2) {
        array[p1].splice(p2, 1, pathCharacter);
        myArrayGrid = array;
        this.gp1 = p1;
        this.gp2 = p2;
        //this.printer(array);
    }
    //Function: Check Input
    //What: takes the current array and index positions, checks if the user fell off the map, if not, updates the location of the user character, calls the myPath function, checks the win or lose conditions and calls to continue the game
    //Input: Array, position at index i, position at index j
    //Output: Prints string or/and calls playGame function
    checkInput(arr, p1, p2) {
        if ((p1 || p2) < 0) {
            return console.log(`You fell off the map, ${loseMsg}`);
        }
        newLocation = arr[p1][p2];
        this.myPath(arr, p1, p2);

        if (this.winOrLose(newLocation) === 1) {
            return console.log("You found your hat! Thanks for playing!");
        } else if (this.winOrLose(newLocation) === 2) {
            console.log(`You fell into a hole, ${loseMsg}`);
        } else if (this.winOrLose(newLocation) === 4) {
            console.log("Continue game: ");
            this.playGame();
        }
    }
    //Function Name: Input Processor
    //What it does: takes user input, and moves the character to different array index position.
    //Input: User input key
    //Output: Print array with updated characters, Print message of game status
    inputProcessor(userInput) {
        //let newLocation = []; //Saves the grid char before input location is updated
        let myArr = this.field;
        let len = this.gp1;
        let wid = this.gp2;
        if (userInput === "h") {
            //move left
            wid -= 1;
            this.checkInput(myArr, len, wid);
            //newLocation = myArr[len][wid]; //if -1, will result in an error, have to catch error here.
            //update the moving board
            //myPath(myArr, len, wid); //Prints new array with updated character location
            //winOrLose(newLocation);
        } else if (userInput === "j") {
            //functions
            len += 1;
            this.checkInput(myArr, len, wid);
            /*
        newLocation = offGrid(myArr, len, wid);
        myPath(myArr, len, wid);
        winOrLose(newLocation);
        */
        } else if (userInput === "k") {
            //functions
            len -= 1;
            this.checkInput(myArr, len, wid);
            /*
        newLocation = offGrid(myArr, len, wid);
        myPath(myArr, len, wid);
        winOrLose(newLocation);
        */
        } else if (userInput === "l") {
            //functions
            wid += 1;
            this.checkInput(myArr, len, wid);
            //newLocation = myArr[len][wid];
            //myPath(myArr, len, wid);
            //winOrLose(newLocation);
        } else {
            console.log(
                "Please put in the correct direction inputs: h,j,k or l"
            );
            this.playGame();
        }
        console.log(newLocation);
    }
    playGame() {
        this.printer(this.field);
        let userInput = prompt(
            "Please choose a direction using the hjkl keys : "
        );
        this.inputProcessor(userInput);
    }
}

const myField = new Field(
    [
        ["*", "░", "O"],
        ["░", "O", "░"],
        ["░", "^", "░"],
    ],
    0,
    0
);

// myField.printer(); //tested
// myField.tileRandom(); //tested
// console.log(myField.printTileArrayLine(6)); //tested
// console.log(myField.printHatArrayLine(7)); //tested
// console.log(myField.printTileArrayGrid(5, 5)); //tested
// console.log(myField.winOrLose(hat)); //tested
// console.log(myField.winOrLose(hole)); //tested
// console.log(myField.winOrLose(fieldCharacter)); //tested
// console.log(myField.winOrLose(undefined)); //tested
// myField.myPath(myField.field, 0, 0); //tested
myField.field = myField.printTileArrayGrid(10, 10);
myField.myPath(myField.field, 0, 0);
myField.playGame();
